// @ts-check
/* global chrome, extractContentFromTab, dropboxClient */

document.addEventListener('DOMContentLoaded', function() {
    const exportBtn = /** @type {HTMLButtonElement} */ (document.getElementById('exportBtn'));
    const uploadToDropboxCheckbox = /** @type {HTMLInputElement} */ (document.getElementById('uploadToDropbox'));
    const settingsBtn = /** @type {HTMLButtonElement} */ (document.getElementById('settingsBtn'));
    const progress = /** @type {HTMLDivElement} */ (document.getElementById('progress'));
    const progressBar = /** @type {HTMLDivElement} */ (document.getElementById('progressBar'));
    const status = /** @type {HTMLDivElement} */ (document.getElementById('status'));

    const debugLog = (...args) => {
        console.log('[popup]', ...args);
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    debugLog('Popup mounted, starting initialization');
    initializePopup();

    // Event Listeners
    exportBtn.addEventListener('click', handleExport);
    settingsBtn.addEventListener('click', openSettings);
    uploadToDropboxCheckbox.addEventListener('change', handleDropboxToggle);

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popup
     */
    async function initializePopup() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            debugLog('Initializing popup');
            await updateDropboxStatus();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await loadSettings();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
            await checkExportAvailability();
        } catch (error) {
            console.error('Error initializing popup:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    async function updateDropboxStatus() {
        try {
            const dropboxStatus = /** @type {HTMLDivElement} */ (document.getElementById('dropboxStatus'));
            const isConnected = await dropboxClient.isConnected();
            debugLog('Dropbox connection status', { isConnected });
            
            if (isConnected) {
                dropboxStatus.textContent = 'üìÅ Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω';
                dropboxStatus.className = 'dropbox-status connected';
                uploadToDropboxCheckbox.disabled = false;
            } else {
                dropboxStatus.textContent = 'üìÅ Dropbox –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
                dropboxStatus.className = 'dropbox-status disconnected';
                uploadToDropboxCheckbox.disabled = true;
                uploadToDropboxCheckbox.checked = false;
            }
        } catch (error) {
            console.error('Error updating Dropbox status:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    async function loadSettings() {
        try {
            const settings = await chrome.storage.local.get(['autoUploadToDropbox']);
            debugLog('Loaded settings', settings);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω
            if (!uploadToDropboxCheckbox.disabled && settings.autoUploadToDropbox) {
                uploadToDropboxCheckbox.checked = true;
            }
        } catch (error) {
            console.error('Error loading settings:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async function checkExportAvailability() {
        try {
            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
            const currentTab = tabs[0];
            debugLog('Active tab info', currentTab);
            
            if (!currentTab || !currentTab.url) {
                setStatus('‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
                exportBtn.disabled = true;
                return;
            }
            
            if (currentTab.url.startsWith('chrome://') || currentTab.url.startsWith('chrome-extension://')) {
                setStatus('‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü', 'error');
                exportBtn.disabled = true;
            } else {
                setStatus('–ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É');
                exportBtn.disabled = false;
            }
        } catch (error) {
            console.error('Error checking export availability:', error);
            setStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
            exportBtn.disabled = true;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async function handleExport() {
        const shouldUploadToDropbox = uploadToDropboxCheckbox.checked;
        debugLog('Starting export flow', { shouldUploadToDropbox });
        
        try {
            // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            renderWorkflowStage('init', shouldUploadToDropbox);
            setProgress(5);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
            const tab = tabs[0];
            debugLog('Queried tabs', tabs);
            if (!tab?.id) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É');
            }
            
            // –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            renderWorkflowStage('extract', shouldUploadToDropbox);
            setProgress(20);
            
            const response = await extractContentFromTab(tab.id);
            debugLog('Content extraction response', response);
            
            if (!response || !response.success) {
                throw new Error(response?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç');
            }
            
            // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ EPUB
            renderWorkflowStage('epub', shouldUploadToDropbox);
            setProgress(50);
            
            const epubResponse = await chrome.runtime.sendMessage({
                action: 'createEPUB',
                data: response.data,
                uploadToDropbox: shouldUploadToDropbox
            });
            debugLog('EPUB generation response', epubResponse);
            
            if (!epubResponse || !epubResponse.success) {
                throw new Error(epubResponse?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EPUB');
            }
            
            // –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Dropbox (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            renderWorkflowStage('done', shouldUploadToDropbox);
            setProgress(shouldUploadToDropbox ? 95 : 85);
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            await chrome.downloads.download({
                url: epubResponse.downloadUrl,
                filename: epubResponse.filename
            });
            debugLog('Triggered download', { filename: epubResponse.filename });
            
            setProgress(100);
            
            const successMessage = shouldUploadToDropbox ? 
                `‚úÖ EPUB —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Dropbox${epubResponse.dropboxPath ? ` (${epubResponse.dropboxPath})` : ''}!` : 
                '‚úÖ EPUB —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!';
            
            setStatus(successMessage, 'success');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                window.close();
            }, 2000);
            
        } catch (error) {
            const err = /** @type {Error} */ (error);
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', err);
            debugLog('Export flow failed', err);
            setStatus(`‚ùå ${err.message}`, 'error');
            setProgress(0);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ Dropbox
     */
    async function handleDropboxToggle() {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –≤ Dropbox, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (uploadToDropboxCheckbox.checked && uploadToDropboxCheckbox.disabled) {
            uploadToDropboxCheckbox.checked = false;
            openSettings();
        }
        debugLog('Dropbox toggle changed', {
            checked: uploadToDropboxCheckbox.checked,
            disabled: uploadToDropboxCheckbox.disabled
        });
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    function openSettings() {
        debugLog('Opening settings page');
        chrome.tabs.create({
            url: chrome.runtime.getURL('settings.html')
        });
        window.close();
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param {string} message
     * @param {string} type
     */
    function setStatus(message, type = '') {
        status.innerHTML = message;
        status.className = `status ${type}`;
        debugLog('Status updated', { message, type });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —ç—Ç–∞–ø–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏.
     * @param {'init'|'extract'|'epub'|'done'} stage
     * @param {boolean} includeDropbox
     */
    function renderWorkflowStage(stage, includeDropbox) {
        const steps = [
            { key: 'init', text: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' },
            { key: 'extract', text: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' },
            { key: 'epub', text: '–°–æ–∑–¥–∞–Ω–∏–µ EPUB —Ñ–∞–π–ª–∞' }
        ];

        if (includeDropbox) {
            steps.push({ key: 'upload', text: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Dropbox' });
        }
        debugLog('Render workflow stage', { stage, includeDropbox });

        let viewSteps;
        if (stage === 'done') {
            viewSteps = steps.map(step => ({ text: step.text, completed: true }));
        } else {
            const currentIndex = steps.findIndex(s => s.key === stage);
            if (currentIndex === -1) {
                throw new Error(`Unknown workflow stage: ${stage}`);
            }

            viewSteps = steps.map((step, index) => {
                if (index < currentIndex) {
                    return { text: step.text, completed: true };
                }

                if (index === currentIndex) {
                    return { text: `${step.text}...`, active: true };
                }

                return { text: step.text };
            });
        }

        setMultiStepStatus(viewSteps);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏-—à–∞–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @param {Array<{text: string, active?: boolean, completed?: boolean}>} steps
     */
    function setMultiStepStatus(steps) {
        const stepsHtml = steps.map(step => {
            let className = 'step';
            let icon = 'üî∏';
            
            if (step.completed) {
                className += ' completed';
                icon = '‚úÖ';
            } else if (step.active) {
                className += ' active';
                icon = 'üîÑ';
            }
            
            return `<div class="${className}">${icon} ${step.text}</div>`;
        }).join('');
        
        status.innerHTML = `<div class="multi-step">${stepsHtml}</div>`;
        status.className = 'status';
        debugLog('Multi-step status rendered', steps);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
     * @param {number} percent
     */
    function setProgress(percent) {
        if (percent > 0) {
            progress.style.display = 'block';
            progressBar.style.width = `${percent}%`;
            exportBtn.disabled = true;
            exportBtn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç...';
        } else {
            progress.style.display = 'none';
            progressBar.style.width = '0%';
            exportBtn.disabled = false;
            exportBtn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç –≤ EPUB';
        }
        debugLog('Progress updated', { percent });
    }
});
